"\n\267\001\n,mediapipe/framework/calculator_options.proto\022\tmediapipe\"F\n"
"\021CalculatorOptions\022%\n\014merge_fields\030\001 \001(\010B\002\030\001R"
"\013mergeFields*\n\010\240\234\001\020\200\200\200\200\002B4\n\032com.google.m"
"ediapipe.protoB\026CalculatorOptionsProto\n\215\001\n+mediapipe/framework/medi"
"apipe_options.proto\022\tmediapipe\"\036\n\020MediaPipeOptions*\n\010\240\234"
"\001\020\200\200\200\200\002B3\n\032com.google.mediapipe.protoB\025MediaPipeOp"
"tionsProto\n\254\003\n(mediapipe/framework/packet_factory.proto\022\tmediapipe"
"\"\"\n\024PacketFactoryOptions*\n\010\240\234\001\020\200\200\200\200\002\""
"\317\001\n\023PacketFactoryConfig\022%\n\016packet_factory\030\001 \001(\tR\rp"
"acketFactory\022,\n\022output_side_packet\030\002 \001(\tR\020outputSidePacket"
"\022(\n\017external_output\030\352\007 \001(\tR\016externalOutput\0229\n\007op"
"tions\030\003 \001(\0132\037.mediapipe.PacketFactoryOptionsR\007options\"M\n"
"\023PacketManagerConfig\0226\n\006packet\030\001 \003(\0132\036.mediapipe.Pack"
"etFactoryConfigR\006packetB0\n\032com.google.mediapipe.protoB\022PacketFactory"
"Proto\n\350\003\n*mediapipe/framework/packet_generator.proto\022\tmediapipe\"M"
"\n\026PacketGeneratorOptions\022\'\n\014merge_fields\030\001 \001(\010:\004tru"
"eR\013mergeFields*\n\010\240\234\001\020\200\200\200\200\002\"\253\002\n\025Pa"
"cketGeneratorConfig\022)\n\020packet_generator\030\001 \001(\tR\017packetGener"
"ator\022*\n\021input_side_packet\030\002 \003(\tR\017inputSidePacket\022&\n"
"\016external_input\030\352\007 \003(\tR\rexternalInput\022,\n\022output_side_p"
"acket\030\003 \003(\tR\020outputSidePacket\022(\n\017external_output\030\353"
"\007 \003(\tR\016externalOutput\022;\n\007options\030\004 \001(\0132!.mediapip"
"e.PacketGeneratorOptionsR\007optionsB2\n\032com.google.mediapipe.protoB\024Pac"
"ketGeneratorProto\n\336\002\n(mediapipe/framework/status_handler.proto\022\tme"
"diapipe\032+mediapipe/framework/mediapipe_options.proto\"\307\001\n\023StatusH"
"andlerConfig\022%\n\016status_handler\030\001 \001(\tR\rstatusHandler\022*\n"
"\021input_side_packet\030\002 \003(\tR\017inputSidePacket\022&\n\016external_i"
"nput\030\352\007 \003(\tR\rexternalInput\0225\n\007options\030\003 \001(\0132"
"\033.mediapipe.MediaPipeOptionsR\007optionsB0\n\032com.google.mediapipe.protoB"
"\022StatusHandlerProto\n\206\004\n(mediapipe/framework/stream_handler.proto"
"\022\tmediapipe\032+mediapipe/framework/mediapipe_options.proto\"\236\001\n"
"\030InputStreamHandlerConfig\022K\n\024input_stream_handler\030\001 \001(\t:"
"\031DefaultInputStreamHandlerR\022inputStreamHandler\0225\n\007options\030\003"
" \001(\0132\033.mediapipe.MediaPipeOptionsR\007options\"\316\001\n\031OutputSt"
"reamHandlerConfig\022N\n\025output_stream_handler\030\001 \001(\t:\032InOrderO"
"utputStreamHandlerR\023outputStreamHandler\022*\n\021input_side_packet\030\002"
" \003(\tR\017inputSidePacket\0225\n\007options\030\003 \001(\0132\033.mediapip"
"e.MediaPipeOptionsR\007optionsB0\n\032com.google.mediapipe.protoB\022StreamHan"
"dlerProto\n\344\001\n\031google/protobuf/any.proto\022\017google.protobuf\"6\n"
"\003Any\022\031\n\010type_url\030\001 \001(\tR\007typeUrl\022\024\n\005value"
"\030\002 \001(\014R\005valueBv\n\023com.google.protobufB\010AnyProtoP\001Z,goo"
"gle.golang.org/protobuf/types/known/anypb\242\002\003GPB\252\002\036Google.Pro"
"tobuf.WellKnownTypesb\006proto3\n\301\036\n$mediapipe/framework/calculator.pro"
"to\022\tmediapipe\032,mediapipe/framework/calculator_options.proto\032\031goog"
"le/protobuf/any.proto\032+mediapipe/framework/mediapipe_options.proto\032(medi"
"apipe/framework/packet_factory.proto\032*mediapipe/framework/packet_generator."
"proto\032(mediapipe/framework/status_handler.proto\032(mediapipe/framework/str"
"eam_handler.proto\"o\n\016ExecutorConfig\022\022\n\004name\030\001 \001(\tR"
"\004name\022\022\n\004type\030\002 \001(\tR\004type\0225\n\007options\030\003 "
"\001(\0132\033.mediapipe.MediaPipeOptionsR\007options\"\317\002\n\017InputColl"
"ection\022\022\n\004name\030\001 \001(\tR\004name\022(\n\020side_packet_name"
"\030\002 \003(\tR\016sidePacketName\022/\n\023external_input_name\030\352\007 "
"\003(\tR\021externalInputName\022C\n\ninput_type\030\003 \001(\0162$.mediapipe"
".InputCollection.InputTypeR\tinputType\022\033\n\tfile_name\030\004 \001(\tR"
"\010fileName\"k\n\tInputType\022\013\n\007UNKNOWN\020\000\022\014\n\010RECORDI"
"O\020\001\022\024\n\020FOREIGN_RECORDIO\020\002\022\024\n\020FOREIGN_CSV_TEXT"
"\020\003\022\027\n\023INVALID_UPPER_BOUND\020\004\"[\n\022InputCollectionSet"
"\022E\n\020input_collection\030\001 \003(\0132\032.mediapipe.InputCollectionR"
"\017inputCollection\"K\n\017InputStreamInfo\022\033\n\ttag_index\030\001 \001("
"\tR\010tagIndex\022\033\n\tback_edge\030\002 \001(\010R\010backEdge\"\316\007"
"\n\016ProfilerConfig\022?\n\034histogram_interval_size_usec\030\001 \001(\003R"
"\031histogramIntervalSizeUsec\0226\n\027num_histogram_intervals\030\002 \001("
"\003R\025numHistogramIntervals\022A\n\033enable_input_output_latency\030\003 "
"\001(\010B\002\030\001R\030enableInputOutputLatency\022\'\n\017enable_profiler"
"\030\004 \001(\010R\016enableProfiler\0222\n\025enable_stream_latency\030\005 "
"\001(\010R\023enableStreamLatency\022O\n%use_packet_timestamp_for_added_packet"
"\030\006 \001(\010R usePacketTimestampForAddedPacket\022,\n\022trace_log_capac"
"ity\030\007 \001(\003R\020traceLogCapacity\022;\n\032trace_event_types_disable"
"d\030\010 \003(\005R\027traceEventTypesDisabled\022$\n\016trace_log_path\030\t"
" \001(\tR\014traceLogPath\022&\n\017trace_log_count\030\n \001(\005R\rtraceLog"
"Count\0225\n\027trace_log_interval_usec\030\013 \001(\003R\024traceLogInterval"
"Usec\0221\n\025trace_log_margin_usec\030\014 \001(\003R\022traceLogMarginUsec"
"\022=\n\031trace_log_duration_events\030\r \001(\010B\002\030\001R\026traceLog"
"DurationEvents\0227\n\030trace_log_interval_count\030\016 \001(\005R\025traceL"
"ogIntervalCount\022,\n\022trace_log_disabled\030\017 \001(\010R\020traceLogDis"
"abled\022#\n\rtrace_enabled\030\020 \001(\010R\014traceEnabled\0227\n\030trace"
"_log_instant_events\030\021 \001(\010R\025traceLogInstantEvents\022+\n\021calc"
"ulator_filter\030\022 \001(\tR\020calculatorFilter\"\366\016\n\025CalculatorGr"
"aphConfig\0229\n\004node\030\001 \003(\0132%.mediapipe.CalculatorGraphConfig.N"
"odeR\004node\022E\n\016packet_factory\030\006 \003(\0132\036.mediapipe.PacketF"
"actoryConfigR\rpacketFactory\022K\n\020packet_generator\030\007 \003(\0132 .me"
"diapipe.PacketGeneratorConfigR\017packetGenerator\022\037\n\013num_threads\030"
"\010 \001(\005R\nnumThreads\022E\n\016status_handler\030\t \003(\0132\036.medi"
"apipe.StatusHandlerConfigR\rstatusHandler\022!\n\014input_stream\030\n \003(\t"
"R\013inputStream\022#\n\routput_stream\030\017 \003(\tR\014outputStream\022*\n"
"\021input_side_packet\030\020 \003(\tR\017inputSidePacket\022,\n\022output_sid"
"e_packet\030\021 \003(\tR\020outputSidePacket\022$\n\016max_queue_size\030\013"
" \001(\005R\014maxQueueSize\022\'\n\017report_deadlock\030\025 \001(\010R\016r"
"eportDeadlock\022U\n\024input_stream_handler\030\014 \001(\0132#.mediapipe.Inp"
"utStreamHandlerConfigR\022inputStreamHandler\022X\n\025output_stream_handler"
"\030\r \001(\0132$.mediapipe.OutputStreamHandlerConfigR\023outputStreamHandler"
"\0225\n\010executor\030\016 \003(\0132\031.mediapipe.ExecutorConfigR\010execut"
"or\022B\n\017profiler_config\030\022 \001(\0132\031.mediapipe.ProfilerConfigR"
"\016profilerConfig\022\030\n\007package\030\023 \001(\tR\007package\022\022\n"
"\004type\030\024 \001(\tR\004type\0226\n\007options\030\351\007 \001(\0132\033"
".mediapipe.MediaPipeOptionsR\007options\022:\n\rgraph_options\030\352\007 \003"
"(\0132\024.google.protobuf.AnyR\014graphOptions\032\346\006\n\004Node\022\022"
"\n\004name\030\001 \001(\tR\004name\022\036\n\ncalculator\030\002 \001(\tR\nca"
"lculator\022!\n\014input_stream\030\003 \003(\tR\013inputStream\022#\n\routput"
"_stream\030\004 \003(\tR\014outputStream\022*\n\021input_side_packet\030\005 "
"\003(\tR\017inputSidePacket\022,\n\022output_side_packet\030\006 \003(\tR\020o"
"utputSidePacket\0226\n\007options\030\007 \001(\0132\034.mediapipe.CalculatorO"
"ptionsR\007options\0227\n\014node_options\030\010 \003(\0132\024.google.protob"
"uf.AnyR\013nodeOptions\022!\n\014source_layer\030\t \001(\005R\013sourceLayer"
"\022(\n\020buffer_size_hint\030\n \001(\005R\016bufferSizeHint\022U\n\024input"
"_stream_handler\030\013 \001(\0132#.mediapipe.InputStreamHandlerConfigR\022inp"
"utStreamHandler\022X\n\025output_stream_handler\030\014 \001(\0132$.mediapipe."
"OutputStreamHandlerConfigR\023outputStreamHandler\022F\n\021input_stream_info"
"\030\r \003(\0132\032.mediapipe.InputStreamInfoR\017inputStreamInfo\022\032\n"
"\010executor\030\016 \001(\tR\010executor\022F\n\017profiler_config\030\017 "
"\001(\0132\031.mediapipe.ProfilerConfigB\002\030\001R\016profilerConfig\022\""
"\n\rmax_in_flight\030\020 \001(\005R\013maxInFlight\022!\n\014option_value\030"
"\021 \003(\tR\013optionValue\022&\n\016external_input\030\355\007 \003(\tR\rex"
"ternalInputB-\n\032com.google.mediapipe.protoB\017CalculatorProtoP\000b\006pro"
"to3\n\244\002\n0mediapipe/calculators/core/gate_calculator.proto\022\tmediapip"
"e\032$mediapipe/framework/calculator.proto\"\276\001\n\025GateCalculatorOption"
"s\0223\n\026empty_packets_as_allow\030\001 \001(\010R\023emptyPacketsAsAllow"
"\022\033\n\005allow\030\002 \001(\010:\005falseR\005allow2S\n\003ext\022\034.m"
"ediapipe.CalculatorOptions\030\337\237\350| \001(\0132 .mediapipe.GateCalculat"
"orOptionsR\003ext\nm\n\036mediapipe/gpu/gpu_origin.proto\022\tmediapipe\"@\n\t"
"GpuOrigin\"3\n\004Mode\022\013\n\007DEFAULT\020\000\022\020\n\014CONVENTIONAL"
"\020\001\022\014\n\010TOP_LEFT\020\002\n\352\010\n=mediapipe/calculators/tenso"
"r/image_to_tensor_calculator.proto\022\tmediapipe\032$mediapipe/framework/calc"
"ulator.proto\032\036mediapipe/gpu/gpu_origin.proto\"\327\007\n\036ImageToTenso"
"rCalculatorOptions\022.\n\023output_tensor_width\030\001 \001(\005R\021outputT"
"ensorWidth\0220\n\024output_tensor_height\030\002 \001(\005R\022outputTensorHe"
"ight\022*\n\021keep_aspect_ratio\030\003 \001(\010R\017keepAspectRatio\022q\n"
"\031output_tensor_float_range\030\004 \001(\01324.mediapipe.ImageToTensorCalcu"
"latorOptions.FloatRangeH\000R\026outputTensorFloatRange\022k\n\027output_tenso"
"r_int_range\030\007 \001(\01322.mediapipe.ImageToTensorCalculatorOptions.IntRa"
"ngeH\000R\024outputTensorIntRange\022n\n\030output_tensor_uint_range\030\010 "
"\001(\01323.mediapipe.ImageToTensorCalculatorOptions.UIntRangeH\000R\025output"
"TensorUintRange\0228\n\ngpu_origin\030\005 \001(\0162\031.mediapipe.GpuOrigin."
"ModeR\tgpuOrigin\022U\n\013border_mode\030\006 \001(\01624.mediapipe.ImageToTe"
"nsorCalculatorOptions.BorderModeR\nborderMode\0320\n\nFloatRange\022\020\n\003"
"min\030\001 \001(\002R\003min\022\020\n\003max\030\002 \001(\002R\003max\032."
"\n\010IntRange\022\020\n\003min\030\001 \001(\003R\003min\022\020\n\003max\030"
"\002 \001(\003R\003max\032/\n\tUIntRange\022\020\n\003min\030\001 \001(\004R"
"\003min\022\020\n\003max\030\002 \001(\004R\003max\"K\n\nBorderMode\022\026\n"
"\022BORDER_UNSPECIFIED\020\000\022\017\n\013BORDER_ZERO\020\001\022\024\n\020B"
"ORDER_REPLICATE\020\0022]\n\003ext\022\034.mediapipe.CalculatorOptions\030\323"
"\352\267\237\001 \001(\0132).mediapipe.ImageToTensorCalculatorOptionsR\003extB"
"\007\n\005range\n\262\014\n7mediapipe/calculators/tensor/inference_calculator."
"proto\022\tmediapipe\032$mediapipe/framework/calculator.proto\"\202\013\n\032I"
"nferenceCalculatorOptions\022\035\n\nmodel_path\030\001 \001(\tR\tmodelPath"
"\022\"\n\007use_gpu\030\002 \001(\010:\005falseB\002\030\001R\006useGpu\022&\n"
"\tuse_nnapi\030\003 \001(\010:\005falseB\002\030\001R\010useNnapi\022(\n\016cp"
"u_num_thread\030\004 \001(\005:\002-1R\014cpuNumThread\022J\n\010delegate\030"
"\005 \001(\0132..mediapipe.InferenceCalculatorOptions.DelegateR\010delegate"
"\032\247\010\n\010Delegate\022O\n\006tflite\030\001 \001(\01325.mediapipe.Infe"
"renceCalculatorOptions.Delegate.TfLiteH\000R\006tflite\022F\n\003gpu\030\002 "
"\001(\01322.mediapipe.InferenceCalculatorOptions.Delegate.GpuH\000R\003gpu\022"
"L\n\005nnapi\030\003 \001(\01324.mediapipe.InferenceCalculatorOptions.Delegate"
".NnapiH\000R\005nnapi\022R\n\007xnnpack\030\004 \001(\01326.mediapipe.Inferenc"
"eCalculatorOptions.Delegate.XnnpackH\000R\007xnnpack\032\010\n\006TfLite\032"
"\247\004\n\003Gpu\0226\n\024use_advanced_gpu_api\030\001 \001(\010:\005falseR"
"\021useAdvancedGpuApi\022M\n\003api\030\004 \001(\01626.mediapipe.InferenceCal"
"culatorOptions.Delegate.Gpu.Api:\003ANYR\003api\0226\n\024allow_precision_loss"
"\030\003 \001(\010:\004trueR\022allowPrecisionLoss\022,\n\022cached_kernel_pat"
"h\030\002 \001(\tR\020cachedKernelPath\0220\n\024serialized_model_dir\030\007 "
"\001(\tR\022serializedModelDir\022\037\n\013model_token\030\010 \001(\tR\nmode"
"lToken\022h\n\005usage\030\005 \001(\0162A.mediapipe.InferenceCalculatorOption"
"s.Delegate.Gpu.InferenceUsage:\017SUSTAINED_SPEEDR\005usage\"&\n\003Api\022"
"\007\n\003ANY\020\000\022\n\n\006OPENGL\020\001\022\n\n\006OPENCL\020\002\"N\n"
"\016InferenceUsage\022\017\n\013UNSPECIFIED\020\000\022\026\n\022FAST_SINGLE_A"
"NSWER\020\001\022\023\n\017SUSTAINED_SPEED\020\002\032p\n\005Nnapi\022\033\n\t"
"cache_dir\030\001 \001(\tR\010cacheDir\022\037\n\013model_token\030\002 \001("
"\tR\nmodelToken\022)\n\020accelerator_name\030\003 \001(\tR\017acceleratorName"
"\032.\n\007Xnnpack\022#\n\013num_threads\030\001 \001(\005:\002-1R\nnumThreads"
"B\n\n\010delegate2Y\n\003ext\022\034.mediapipe.CalculatorOptions\030\367\323"
"\313\240\001 \001(\0132%.mediapipe.InferenceCalculatorOptionsR\003extBA\n%com."
"google.mediapipe.calculator.protoB\030InferenceCalculatorProto\n\311\r\nCmedia"
"pipe/calculators/tensor/tensors_to_detections_calculator.proto\022\tmediapipe"
"\032$mediapipe/framework/calculator.proto\"\320\014\n$TensorsToDetectionsCalcu"
"latorOptions\022\037\n\013num_classes\030\001 \001(\005R\nnumClasses\022\033\n"
"\tnum_boxes\030\002 \001(\005R\010numBoxes\022\035\n\nnum_coords\030\003 \001("
"\005R\tnumCoords\0222\n\025keypoint_coord_offset\030\t \001(\005R\023keypointC"
"oordOffset\022&\n\rnum_keypoints\030\n \001(\005:\0010R\014numKeypoints\0228\n"
"\027num_values_per_keypoint\030\013 \001(\005:\0012R\024numValuesPerKeypoint"
"\022+\n\020box_coord_offset\030\014 \001(\005:\0010R\016boxCoordOffset\022\032"
"\n\007x_scale\030\004 \001(\002:\0010R\006xScale\022\032\n\007y_scale\030\005 "
"\001(\002:\0010R\006yScale\022\032\n\007w_scale\030\006 \001(\002:\0010R\006wS"
"cale\022\032\n\007h_scale\030\007 \001(\002:\0010R\006hScale\022G\n\035apply_e"
"xponential_on_box_size\030\r \001(\010:\005falseR\031applyExponentialOnBoxSize"
"\0227\n\024reverse_output_order\030\016 \001(\010:\005falseR\022reverseOutputO"
"rder\022%\n\016ignore_classes\030\010 \003(\005R\rignoreClasses\022\'\n\rallow"
"_classes\030\025 \003(\005B\002\020\001R\014allowClasses\022*\n\rsigmoid_score"
"\030\017 \001(\010:\005falseR\014sigmoidScore\0222\n\025score_clipping_thresh"
"\030\020 \001(\002R\023scoreClippingThresh\022.\n\017flip_vertically\030\022 "
"\001(\010:\005falseR\016flipVertically\022(\n\020min_score_thresh\030\023 \001"
"(\002R\016minScoreThresh\022#\n\013max_results\030\024 \001(\005:\002-1R\nmaxR"
"esults\022d\n\016tensor_mapping\030\026 \001(\0132=.mediapipe.TensorsToDetecti"
"onsCalculatorOptions.TensorMappingR\rtensorMapping\022|\n\026box_boundaries_in"
"dices\030\027 \001(\0132D.mediapipe.TensorsToDetectionsCalculatorOptions.BoxBo"
"undariesIndicesH\000R\024boxBoundariesIndices\032\232\002\n\rTensorMapping\022"
"6\n\027detections_tensor_index\030\001 \001(\005R\025detectionsTensorIndex\022"
"0\n\024classes_tensor_index\030\002 \001(\005R\022classesTensorIndex\022.\n"
"\023scores_tensor_index\030\003 \001(\005R\021scoresTensorIndex\022=\n\033num_"
"detections_tensor_index\030\004 \001(\005R\030numDetectionsTensorIndex\0220\n"
"\024anchors_tensor_index\030\005 \001(\005R\022anchorsTensorIndex\032r\n\024Bo"
"xBoundariesIndices\022\025\n\004ymin\030\001 \001(\005:\0010R\004ymin\022\025"
"\n\004xmin\030\002 \001(\005:\0011R\004xmin\022\025\n\004ymax\030\003 \001("
"\005:\0012R\004ymax\022\025\n\004xmax\030\004 \001(\005:\0013R\004xmax2c\n\003"
"ext\022\034.mediapipe.CalculatorOptions\030\257\215\214\240\001 \001(\0132/.me"
"diapipe.TensorsToDetectionsCalculatorOptionsR\003extB\r\n\013box_indices\n\315"
"\006\n9mediapipe/calculators/tflite/ssd_anchors_calculator.proto\022\tmediapip"
"e\032$mediapipe/framework/calculator.proto\"\336\005\n\033SsdAnchorsCalculator"
"Options\022(\n\020input_size_width\030\001 \001(\005R\016inputSizeWidth\022*\n"
"\021input_size_height\030\002 \001(\005R\017inputSizeHeight\022\033\n\tmin_sca"
"le\030\003 \001(\002R\010minScale\022\033\n\tmax_scale\030\004 \001(\002R\010m"
"axScale\022+\n\017anchor_offset_x\030\005 \001(\002:\0030.5R\ranchorOffsetX"
"\022+\n\017anchor_offset_y\030\006 \001(\002:\0030.5R\ranchorOffsetY\022\035\n"
"\nnum_layers\030\007 \001(\005R\tnumLayers\022*\n\021feature_map_width\030\010"
" \003(\005R\017featureMapWidth\022,\n\022feature_map_height\030\t \003(\005R"
"\020featureMapHeight\022\030\n\007strides\030\n \003(\005R\007strides\022#\n\r"
"aspect_ratios\030\013 \003(\002R\014aspectRatios\022E\n\034reduce_boxes_in_low"
"est_layer\030\014 \001(\010:\005falseR\030reduceBoxesInLowestLayer\022H\n\037i"
"nterpolated_scale_aspect_ratio\030\r \001(\002:\0011R\034interpolatedScaleAspe"
"ctRatio\0221\n\021fixed_anchor_size\030\016 \001(\010:\005falseR\017fixedAncho"
"rSize2Y\n\003ext\022\034.mediapipe.CalculatorOptions\030\377\270\363u \001("
"\0132&.mediapipe.SsdAnchorsCalculatorOptionsR\003ext\n\245\007\n5mediapipe/mod"
"ules/face_detection/face_detection.proto\022\tmediapipe\0327mediapipe/calculat"
"ors/tensor/inference_calculator.proto\032,mediapipe/framework/calculator_optio"
"ns.proto\032\036mediapipe/gpu/gpu_origin.proto\"\222\005\n\024FaceDetectionOpt"
"ions\022\035\n\nmodel_path\030\001 \001(\tR\tmodelPath\0228\n\ngpu_origin\030"
"\013 \001(\0162\031.mediapipe.GpuOrigin.ModeR\tgpuOrigin\022!\n\014tensor_widt"
"h\030\025 \001(\005R\013tensorWidth\022#\n\rtensor_height\030\026 \001(\005R"
"\014tensorHeight\022\035\n\nnum_layers\030\027 \001(\005R\tnumLayers\022\030\n"
"\007strides\030\030 \003(\005R\007strides\022H\n\037interpolated_scale_aspect_"
"ratio\030\031 \001(\002:\0011R\034interpolatedScaleAspectRatio\022\033\n\tnum_"
"boxes\030\037 \001(\005R\010numBoxes\022\032\n\007x_scale\030  \001(\002:\0010"
"R\006xScale\022\032\n\007y_scale\030! \001(\002:\0010R\006yScale\022\032\n\007"
"w_scale\030\" \001(\002:\0010R\006wScale\022\032\n\007h_scale\030# \001(\002:"
"\0010R\006hScale\022(\n\020min_score_thresh\030$ \001(\002R\016minScoreThresh"
"\022J\n\010delegate\030\006 \001(\0132..mediapipe.InferenceCalculatorOptions.D"
"elegateR\010delegate2S\n\003ext\022\034.mediapipe.CalculatorOptions\030\356"
"\363\274\262\001 \001(\0132\037.mediapipe.FaceDetectionOptionsR\003extBE\n*com"
".google.mediapipe.modules.facedetectionB\027FaceDetectionFrontProto"
